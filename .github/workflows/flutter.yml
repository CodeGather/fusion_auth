# 工作流程的名字
name: Test, Build and Release apk

# 工作流程触发的时机，这里是当一个版本标签推送到仓库时触发
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 这个工作流程需要执行的任务
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    # 这个任务的步骤
    steps:
      # 拉取项目代码
      - uses: actions/checkout@v3
      # 建立 java 环境
      - name: Setup Java JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      # 建立 Flutter 环境
      - name: Flutter action
        uses: subosito/flutter-action@main
        with:
          channel: "stable"
      # 下载项目依赖
      - run: flutter pub get
      # 执行测试
      - run: flutter test
      # 打包 APK
#      - run: flutter build apk --release
      # 发布到 Release
      - name: Release apk
        run: flutter build apk --release
        working-directory: example
      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: apk
          path: build/app/outputs/apk/release/app-release.apk

  apk:
    name: Generate APK
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      - uses: subosito/flutter-action@main
      - uses: finnp/create-file-action@master
        env:
          FILE_NAME: lib/common/config/ignoreConfig.dart
          FILE_DATA: class NetConfig { static const CLIENT_ID = "${{ secrets.CLIENT_ID }}"; static const CLIENT_SECRET = "${{ secrets.CLIENT_SECRET }}";}
      - run: flutter pub get
      - name: Release apk
          run: flutter build apk --release
          working-directory: example
      - name: Upload APK
        uses: actions/upload-artifact@v2
        with:
          name: apk
          path: build/app/outputs/apk/release/app-release.apk
  release:
    name: Release APK
    needs: apk
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download APK from build
        uses: actions/download-artifact@v2
        with:
          name: apk
      - name: Display structure of downloaded files
        run: ls -R

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
      - name: Upload Release APK
        id: upload_release_asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/zip



# name: Dart Test
#
# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]
#
# jobs:
#   build:
#     name: Build
#     runs-on: ubuntu-latest
#     steps:
#       - uses: AcmeSoftwareLLC/flutter-build@v1.0.1
#
#        - uses: actions/checkout@v3
#        - uses: actions/setup-java@v2
#          with:
#            distribution: 'zulu'
#            java-version: 11
#        - uses: subosito/flutter-action@v2
#          with:
#            channel: 'stable' # or: 'beta', 'dev', 'master' (or 'main')
#        - run: flutter --version
#        - uses: finnp/create-file-action@master
#          env:
#            FILE_NAME: /example/lib/main.dart
#            FILE_DATA: class NetConfig { static const CLIENT_ID = "${{ secrets.CLIENT_ID }}"; static const CLIENT_SECRET = "${{ secrets.CLIENT_SECRET }}";}
#        - run: cd /example
#        - run: flutter pub get
#        - run: flutter build apk --release
#
#    apk:
#      name: Generate APK
#      if: startsWith(github.ref, 'refs/tags/')
#      runs-on: ubuntu-latest
#      steps:
#        - name: Checkout
#          uses: actions/checkout@v2
#        - name: Setup JDK
#          uses: actions/setup-java@v2
#          with:
#            distribution: 'zulu'
#            java-version: 8
#        - uses: subosito/flutter-action@v2.12.0
#        - uses: finnp/create-file-action@master
#          env:
#            FILE_NAME: lib/common/config/ignoreConfig.dart
#            FILE_DATA: class NetConfig { static const CLIENT_ID = "${{ secrets.CLIENT_ID }}"; static const CLIENT_SECRET = "${{ secrets.CLIENT_SECRET }}";}
#        - run: flutter pub get
#        - run: flutter build apk --release --target-platform=android-arm64 --no-shrink
#        - name: Upload APK
#          uses: actions/upload-artifact@v2
#          with:
#            name: apk
#            path: build/app/outputs/apk/release/app-release.apk
#    release:
#      name: Release APK
#      needs: apk
#      if: startsWith(github.ref, 'refs/tags/')
#      runs-on: ubuntu-latest
#      steps:
#        - name: Download APK from build
#          uses: actions/download-artifact@v2
#          with:
#            name: apk
#        - name: Display structure of downloaded files
#          run: ls -R
#
#        - name: Create Release
#          id: create_release
#          uses: actions/create-release@v1.1.4
#          env:
#            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          with:
#            tag_name: ${{ github.ref }}
#            release_name: ${{ github.ref }}
#        - name: Upload Release APK
#          id: upload_release_asset
#          uses: actions/upload-release-asset@v1.0.1
#          env:
#            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          with:
#            upload_url: ${{ steps.create_release.outputs.upload_url }}
#            asset_path: ./app-release.apk
#            asset_name: app-release.apk
#            asset_content_type: application/zip
